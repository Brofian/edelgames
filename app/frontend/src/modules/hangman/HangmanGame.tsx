import React, { ReactNode } from 'react';
import ModuleGameInterface from '../../framework/modules/ModuleGameInterface';
import ModuleApi from '../../framework/modules/ModuleApi';
import hangman from './Hangman';
import { GameState } from '@edelgames/types/src/modules/hangman/HMTypes';
import { EventDataObject } from '@edelgames/types/src/app/ApiTypes';
import GameWheel from './components/gameWheel/GameWheel';
import Scoreboard from './components/scoreboard/Scoreboard';
import InputField from './components/inputField/InputField';
import { ReactComponent as HangmanSvg } from './imgs/hangman.svg';
import FinishScreen from './components/finishScreen/FinishScreen';

interface IState {
	gameState: GameState;
}

export default class Hangman
	extends React.Component<{}, IState>
	implements ModuleGameInterface
{
	private readonly api: ModuleApi;

	state: IState = {
		gameState: {
			phase: 'waiting',
			round: 0,
			activeGuesserId: '',
			currentHostId: '',
			letters: [],
			wrongChars: [],
			configuration: {
				minWordLength: 1,
				maxWordLength: 1,
				autoGeneratedWords: false,
				scoreWinningThreshold: 0,
				turnWinningThreshold: 0,
				maxWrongGuesses: 0,
			},
			scoreboard: [],
		},
	};

	constructor(props: {}) {
		super(props);
		this.api = new ModuleApi(hangman, this);
		this.api
			.getEventApi()
			.addEventHandler(
				'gameStateUpdated',
				this.onGameStateUpdateReceived.bind(this)
			);
	}

	componentDidMount() {}

	componentWillUnmount() {}

	onGameStateUpdateReceived(eventData: EventDataObject): void {
		const newState = eventData as GameState;

		this.setState({
			gameState: {
				phase: newState.phase,
				round: newState.round,
				activeGuesserId: newState.activeGuesserId,
				currentHostId: newState.currentHostId,
				letters: newState.letters,
				wrongChars: newState.wrongChars,
				configuration: newState.configuration,
				scoreboard: newState.scoreboard,
			},
		});
	}

	render(): ReactNode {
		if (this.state.gameState.phase === 'finished') {
			return (
				<div id={'hangman'}>
					<FinishScreen
						playerApi={this.api.getPlayerApi()}
						scoreboard={this.state.gameState.scoreboard}
					/>
				</div>
			);
		}

		const activePlayerId =
			this.state.gameState.phase === 'spelling'
				? this.state.gameState.currentHostId
				: this.state.gameState.activeGuesserId;

		const maxDashArrayOffset = 1327;
		const turnErrorProgress =
			this.state.gameState.phase === 'guessing' ||
			this.state.gameState.phase === 'waiting'
				? this.state.gameState.wrongChars.length /
				  (this.state.gameState.configuration.maxWrongGuesses + 1)
				: 0;

		return (
			<div id={'hangman'}>
				<GameWheel
					letters={this.state.gameState.letters}
					playerApi={this.api.getPlayerApi()}
					activePlayerId={activePlayerId}
				/>

				<div className={'game-data-interface'}>
					<Scoreboard
						playerApi={this.api.getPlayerApi()}
						scoreboard={this.state.gameState.scoreboard}
						config={this.state.gameState.configuration}
						round={this.state.gameState.round}
					/>

					<InputField
						playerApi={this.api.getPlayerApi()}
						eventApi={this.api.getEventApi()}
						gameState={this.state.gameState}
						playerGuessCharCallback={console.log}
						playerGuessWordCallback={console.log}
					/>

					{this.state.gameState.configuration.maxWrongGuesses > 0 && (
						<div className={'hangman-visualisation'}>
							<HangmanSvg
								className={'hangman-svg'}
								style={{
									strokeDashoffset:
										-maxDashArrayOffset +
										turnErrorProgress * maxDashArrayOffset,
								}}
							/>
						</div>
					)}
				</div>
			</div>
		);
	}
}
